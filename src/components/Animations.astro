---
// Composant pour gérer les animations globales
---

<style is:global>
/* Keyframes principales */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes bounce {
  0%, 20%, 60%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  80% {
    transform: translateY(-5px);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes wiggle {
  0%, 7%, 100% {
    transform: rotate(0deg);
  }
  15% {
    transform: rotate(-3deg);
  }
  20% {
    transform: rotate(3deg);
  }
  25% {
    transform: rotate(-3deg);
  }
  30% {
    transform: rotate(3deg);
  }
  35% {
    transform: rotate(-1deg);
  }
  40% {
    transform: rotate(1deg);
  }
  50% {
    transform: rotate(0deg);
  }
}

/* Classes utilitaires d'animation */
.animate-fade-in {
  animation: fadeIn 0.8s ease-out forwards;
}

.animate-scale-in {
  animation: scaleIn 0.6s ease-out forwards;
}

.animate-bounce {
  animation: bounce 2s infinite;
}

.animate-pulse {
  animation: pulse 2s infinite;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-wiggle {
  animation: wiggle 1s ease-in-out;
}

/* Délais d'animation */
.delay-100 { animation-delay: 0.1s; }
.delay-200 { animation-delay: 0.2s; }
.delay-300 { animation-delay: 0.3s; }
.delay-400 { animation-delay: 0.4s; }
.delay-500 { animation-delay: 0.5s; }
.delay-700 { animation-delay: 0.7s; }
.delay-1000 { animation-delay: 1s; }

/* Effets de hover */
.hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
  transform: translateY(-5px) scale(1.02);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
}

.hover-tilt {
  transition: transform 0.3s ease;
}

.hover-tilt:hover {
  transform: perspective(1000px) rotateX(5deg) rotateY(-5deg) scale(1.02);
}

.hover-glow {
  transition: box-shadow 0.3s ease;
}

.hover-glow:hover {
  box-shadow: 0 0 20px rgba(219, 143, 117, 0.4);
}

/* Animation pour les boutons */
.btn-animate {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.btn-animate::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: width 0.6s ease, height 0.6s ease;
}

.btn-animate:hover::before {
  width: 300px;
  height: 300px;
}

/* Animation pour les cartes */
.project-card {
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.project-card:hover {
  transform: translateY(-10px) rotate(1deg);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.project-card img {
  transition: transform 0.5s ease, filter 0.3s ease;
}

.project-card:hover img {
  transform: scale(1.1);
  filter: brightness(1.1) contrast(1.1);
}

/* Animation pour les éléments interactifs */
.interactive-element {
  cursor: pointer;
  transition: all 0.3s ease;
}

.interactive-element:hover {
  animation: wiggle 0.5s ease-in-out;
}

/* Scroll reveal */
.scroll-reveal {
  opacity: 0;
  transform: translateY(50px);
  transition: opacity 0.8s ease, transform 0.8s ease;
}

.scroll-reveal.revealed {
  opacity: 1;
  transform: translateY(0);
}

/* Responsive */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

@media (max-width: 768px) {
  .hover-lift:hover,
  .hover-tilt:hover {
    transform: none;
  }
  
  .project-card:hover {
    transform: translateY(-5px);
  }
}
</style>

<script>
// Animation simple avec Intersection Observer
class SimpleAnimations {
  constructor() {
    this.init();
  }

  init() {
    // Observer pour les éléments scroll-reveal
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Observer tous les éléments scroll-reveal
    document.querySelectorAll('.scroll-reveal').forEach(el => {
      observer.observe(el);
    });

    // Animation de la navigation au scroll
    this.animateNavigation();
    
    // Animation d'interaction pour les éléments
    this.addInteractiveAnimations();
  }

  animateNavigation() {
    window.addEventListener('scroll', () => {
      const nav = document.querySelector('nav');
      if (nav) {
        if (window.scrollY > 100) {
          nav.style.background = 'rgba(248, 246, 241, 0.95)';
          nav.style.backdropFilter = 'blur(10px)';
        } else {
          nav.style.background = 'rgba(248, 246, 241, 0.9)';
          nav.style.backdropFilter = 'blur(4px)';
        }
      }
    });
  }

  addInteractiveAnimations() {
    // Animation des images au hover
    document.querySelectorAll('img').forEach(img => {
      img.addEventListener('mouseenter', () => {
        img.style.transform = 'scale(1.05)';
        img.style.transition = 'transform 0.3s ease';
      });
      
      img.addEventListener('mouseleave', () => {
        img.style.transform = 'scale(1)';
      });
    });

    // Animation des tags
    document.querySelectorAll('[class*="tag"], .interactive-element').forEach(tag => {
      tag.addEventListener('mouseenter', () => {
        tag.style.transform = 'translateY(-2px) scale(1.05)';
        tag.style.transition = 'transform 0.3s ease';
      });
      
      tag.addEventListener('mouseleave', () => {
        tag.style.transform = 'translateY(0) scale(1)';
      });
    });
  }
}

// Initialiser après le chargement de la page
document.addEventListener('DOMContentLoaded', () => {
  new SimpleAnimations();
});
</script>
